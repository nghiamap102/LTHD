# Generated by Django 3.2.5 on 2021-11-17 02:32

import ckeditor.fields
import ckeditor_uploader.fields
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('address', models.CharField(max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=12, null=True)),
                ('avatar', models.ImageField(null=True, upload_to='static/user/%Y/%m')),
                ('birthdate', models.DateField(null=True)),
                ('point', models.IntegerField(default=0)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'unique_together': {('phone', 'username')},
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('image', models.ImageField(upload_to='static/blog/%Y/%m')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('content', ckeditor_uploader.fields.RichTextUploadingField(null=True)),
                ('decription', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Departure',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to='static/tour/%Y/%m')),
                ('content', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Destination',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to='static/destination/%Y/%m')),
                ('content', models.TextField(blank=True, null=True)),
            ],
            options={
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='ImgDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='static/img_detail/%Y/%m')),
            ],
        ),
        migrations.CreateModel(
            name='TagBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TagCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TagTourDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='TourDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to='static/tour_detail/%Y/%m')),
                ('slot', models.IntegerField(default=40)),
                ('time_start', models.DateTimeField(null=True)),
                ('duration', models.IntegerField()),
                ('content', ckeditor.fields.RichTextField(null=True)),
                ('price_room', models.IntegerField(null=True)),
                ('price_tour', models.IntegerField(null=True)),
                ('discount', models.IntegerField(default=0, null=True)),
                ('total', models.IntegerField(null=True)),
                ('departure', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detail', to='tours.departure')),
                ('destination', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='detail', to='tours.destination')),
                ('img_detail', models.ManyToManyField(blank=True, null=True, related_name='detail', to='tours.ImgDetail')),
                ('tag', models.ManyToManyField(blank=True, null=True, related_name='detail', to='tours.TagTourDetail')),
            ],
            options={
                'ordering': ['created_date'],
            },
        ),
        migrations.CreateModel(
            name='Transport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Hotel',
            fields=[
                ('name', models.CharField(max_length=50)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('updated_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('image', models.ImageField(upload_to='static/hotel/%Y/%m')),
                ('tour_detail', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tours.tourdetail')),
                ('address', models.CharField(max_length=100)),
                ('phone', models.CharField(max_length=12)),
                ('email', models.CharField(max_length=50)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Staff',
            fields=[
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='tours.user')),
            ],
        ),
        migrations.CreateModel(
            name='TourDetailViews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('views', models.IntegerField(default=0)),
                ('tour_detail', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='tours.tourdetail')),
            ],
        ),
        migrations.AddField(
            model_name='tourdetail',
            name='transport',
            field=models.ManyToManyField(blank=True, null=True, related_name='detail', to='tours.Transport'),
        ),
        migrations.AddField(
            model_name='destination',
            name='tag',
            field=models.ManyToManyField(blank=True, null=True, related_name='tour', to='tours.TagCountry'),
        ),
        migrations.AddField(
            model_name='departure',
            name='tag',
            field=models.ManyToManyField(blank=True, null=True, related_name='departure', to='tours.TagCountry'),
        ),
        migrations.CreateModel(
            name='CommentTourDetail',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tour_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cmt_tour', to='tours.tourdetail')),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='CommentBlog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('active', models.BooleanField(default=True)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cmt_blog', to='tours.blog')),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-id'],
            },
        ),
        migrations.AddField(
            model_name='blog',
            name='img_detail',
            field=models.ManyToManyField(blank=True, null=True, related_name='blog', to='tours.ImgDetail'),
        ),
        migrations.AddField(
            model_name='blog',
            name='tag',
            field=models.ManyToManyField(blank=True, null=True, related_name='blog', to='tours.TagBlog'),
        ),
        migrations.AlterUniqueTogether(
            name='tourdetail',
            unique_together={('name', 'departure')},
        ),
        migrations.CreateModel(
            name='Rating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('rate', models.PositiveSmallIntegerField(default=1)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('tour', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rating', to='tours.tourdetail')),
            ],
            options={
                'unique_together': {('tour', 'creator')},
            },
        ),
        migrations.CreateModel(
            name='Like',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.PositiveSmallIntegerField(choices=[(0, 'like'), (1, 'heart'), (2, 'haha'), (3, 'sad'), (4, 'angry')], default=0)),
                ('created_date', models.DateTimeField(auto_now_add=True)),
                ('update_date', models.DateTimeField(auto_now=True)),
                ('blog', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='like', to='tours.blog')),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('blog', 'creator')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='destination',
            unique_together={('name', 'active')},
        ),
        migrations.AlterUniqueTogether(
            name='departure',
            unique_together={('name', 'active')},
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(null=True)),
                ('adult', models.IntegerField(default=1, validators=[django.core.validators.MinValueValidator(1)])),
                ('children', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('status', models.CharField(choices=[('p', 'Booking processing'), ('a', 'Booking accepted'), ('c', 'Booking canceled')], default='p', max_length=1)),
                ('room', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('created_date', models.DateTimeField(auto_now_add=True, null=True)),
                ('total', models.IntegerField(null=True)),
                ('customer', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='booking', to=settings.AUTH_USER_MODEL)),
                ('tour_detail', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='booking', to='tours.tourdetail')),
            ],
            options={
                'unique_together': {('tour_detail', 'customer', 'status')},
            },
        ),
    ]
